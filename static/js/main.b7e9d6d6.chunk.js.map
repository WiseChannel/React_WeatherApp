{"version":3,"sources":["components/elements/Titles.js","components/elements/Form.js","components/elements/Weather.js","components/config/config.js","App.js","serviceWorker.js","index.js"],"names":["Titles","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","API_KEY","App","state","undefined","error","e","a","preventDefault","target","elements","value","Axios","api_call","data","console","log","setState","main","temp","sys","weather","className","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"+PAQeA,EANA,WACX,OACI,wCCQOC,EAVF,SAAAC,GACT,OACI,0BAAMC,SAAUD,EAAME,YAClB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,SAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,YAC9C,iDCMGC,EAXC,SAAAN,GACZ,OACI,oCACMA,EAAMO,KAAO,oCAAWP,EAAMO,MAAa,GAC3CP,EAAMQ,QAAU,uCAAcR,EAAMQ,SAAgB,GACpDR,EAAMS,YAAc,2CAAkBT,EAAMS,aAAoB,GAChET,EAAMU,SAAW,wCAAeV,EAAMU,UAAiB,GACvDV,EAAMW,YAAc,2CAAkBX,EAAMW,aAAoB,KCTjEC,EAAO,mC,iBCsELC,EA5Df,4MAEIC,MAAQ,CACJL,iBAAaM,EACbR,UAAMQ,EACNP,aAASO,EACTL,cAAUK,EACVJ,iBAAaI,EACbC,OAAO,GARf,EAYId,WAZJ,uCAYiB,WAAOe,GAAP,qBAAAC,EAAA,6DACTD,EAAEE,iBACIZ,EAAOU,EAAEG,OAAOC,SAASd,KAAKe,MAC9Bd,EAAUS,EAAEG,OAAOC,SAASb,QAAQc,MAHjC,SAIcC,IAAM,oDAAD,OAAqDhB,EAArD,YAA6DC,EAA7D,kBAA8EI,EAA9E,kBAJnB,cAIHY,EAJG,gBAKUA,EAASC,KALnB,OAKHA,EALG,OAMTC,QAAQC,IAAIF,GAERlB,EACA,EAAKqB,SAAS,CACVnB,YAAagB,EAAKI,KAAKC,KACvBvB,KAAMkB,EAAKrB,KACXI,QAASiB,EAAKM,IAAIvB,QAClBE,SAAUe,EAAKI,KAAKnB,SACpBC,YAAac,EAAKO,QAAQ,GAAGrB,YAC7BK,MAAO,KAGX,EAAKY,SAAS,CACVnB,iBAAaM,EACbR,UAAMQ,EACNP,aAASO,EACTL,cAAUK,EACVJ,iBAAaI,EACbC,MAAO,qBAxBN,4CAZjB,6GA2CQ,OACI,yBAAKiB,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAM/B,WAAYgC,KAAKhC,aACvB,kBAAC,EAAD,CACIO,YAAayB,KAAKpB,MAAML,YACxBF,KAAM2B,KAAKpB,MAAMP,KACjBC,QAAS0B,KAAKpB,MAAMN,QACpBE,SAAUwB,KAAKpB,MAAMJ,SACrBC,YAAauB,KAAKpB,MAAMH,YACxBK,MAAOkB,KAAKpB,MAAME,aArDtC,GAAyBmB,aCELC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,oCACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLU,QAAQV,MAAMA,EAAMoC,c","file":"static/js/main.b7e9d6d6.chunk.js","sourcesContent":["import React from 'react'\n\nconst Titles = () => {\n    return (\n        <div>Titles</div>\n    )\n}\n\nexport default Titles\n","import React from 'react'\n\nconst Form = props => {\n    return (\n        <form onSubmit={props.getWeather}>\n            <input type=\"text\" name='city' placeholder='City'/>\n            <input type=\"text\" name='country' placeholder='Country'/>\n            <button>Get Weather</button>\n        </form>\n    )\n}\n\nexport default Form\n","import React from 'react'\n\nconst Weather = props => {\n    return(\n        <>\n            { props.city ? <p>City: { props.city }</p> : '' }\n            { props.country ? <p>Country: { props.country }</p> : '' }\n            { props.temperature ? <p>Temperature: { props.temperature }</p> : '' }\n            { props.humidity ? <p>Humidity: { props.humidity }</p> : '' }\n            { props.description ? <p>Description: { props.description }</p> : '' }\n        </>\n    )\n}\nexport default Weather\n","export const API_KEY = `0ecd80333f3fc44ff0ee6bf7087b756c`\n\nexport const API_URL = `http://api.openweathermap.org/data/2.5/weather?q=Kiev,Ukraine&appid=0ecd80333f3fc44ff0ee6bf7087b756c&units=metric`\n","import React, { Component } from 'react';\n\n//import components\nimport Titles from \"./components/elements/Titles\";\nimport Form from \"./components/elements/Form\";\nimport Weather from \"./components/elements/Weather\";\nimport { API_KEY } from \"./components/config/config\";\nimport Axios from \"axios\";\n\n\nexport class App extends Component {\n\n    state = {\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: false,\n\n    }\n\n    getWeather = async (e) => {\n        e.preventDefault()\n        const city = e.target.elements.city.value\n        const country = e.target.elements.country.value\n        const api_call = await Axios(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`)\n        const data = await api_call.data\n        console.log(data)\n\n        if (city) {\n            this.setState({\n                temperature: data.main.temp,\n                city: data.name,\n                country: data.sys.country,\n                humidity: data.main.humidity,\n                description: data.weather[0].description,\n                error: ''\n            })\n        } else {\n            this.setState({\n                temperature: undefined,\n                city: undefined,\n                country: undefined,\n                humidity: undefined,\n                description: undefined,\n                error: 'Enter the values'\n            })\n        }\n\n    }\n\n    render() {\n        return(\n            <div className='App'>\n                <Titles />\n                <Form getWeather={this.getWeather}/>\n                <Weather\n                    temperature={this.state.temperature}\n                    city={this.state.city}\n                    country={this.state.country}\n                    humidity={this.state.humidity}\n                    description={this.state.description}\n                    error={this.state.error}\n                />\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}