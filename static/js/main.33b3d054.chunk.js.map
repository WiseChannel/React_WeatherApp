{"version":3,"sources":["components/elements/Titles.js","components/elements/Form.js","components/elements/Weather.js","components/config/config.js","App.js","serviceWorker.js","index.js"],"names":["Titles","React","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","API_KEY","App","e","a","preventDefault","city","target","elements","value","country","fetch","api_call","data","json","console","log","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qNAUeA,E,uKANP,OACI,0C,GAHSC,IAAMC,WCYZC,E,uKAVP,OACI,0BAAMC,SAAUC,KAAKC,MAAMC,YACvB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,SAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,YAC9C,oD,GANGT,IAAMC,WCQVS,E,uKANP,OACI,4C,GAHUV,IAAMC,WCFfU,EAAO,mCCgCLC,EAtBf,4MAEIN,WAFJ,uCAEiB,WAAOO,GAAP,qBAAAC,EAAA,6DACTD,EAAEE,iBACIC,EAAOH,EAAEI,OAAOC,SAASF,KAAKG,MAC9BC,EAAUP,EAAEI,OAAOC,SAASE,QAAQD,MAHjC,SAIcE,MAAM,oDAAD,OAAqDL,EAArD,YAA6DI,EAA7D,kBAA8ET,EAA9E,kBAJnB,OAIHW,EAJG,OAKHC,EAAOD,EAASE,OACtBC,QAAQC,IAAIH,GANH,2CAFjB,6GAYQ,OACI,yBAAKI,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMrB,WAAYF,KAAKE,aACvB,kBAAC,EAAD,WAhBhB,GAAyBL,aCEL2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,oCACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,a","file":"static/js/main.33b3d054.chunk.js","sourcesContent":["import React from 'react'\n\nclass Titles extends React.Component {\n    render() {\n        return(\n            <div>Title</div>\n        )\n    }\n}\n\nexport default Titles\n","import React from 'react'\n\nclass Form extends React.Component{\n    render() {\n        return(\n            <form onSubmit={this.props.getWeather}>\n                <input type=\"text\" name='city' placeholder='City'/>\n                <input type=\"text\" name='country' placeholder='Country'/>\n                <button>Get Weather</button>\n            </form>\n        )\n    }\n}\n\nexport default Form\n","import React from 'react'\n\nclass Weather extends React.Component{\n    render() {\n        return(\n            <div>Weather</div>\n        )\n    }\n}\n\nexport default Weather\n","export const API_KEY = `0ecd80333f3fc44ff0ee6bf7087b756c`\n\nexport const API_URL = `http://api.openweathermap.org/data/2.5/weather?q=Kiev,Ukraine&appid=0ecd80333f3fc44ff0ee6bf7087b756c&units=metric`\n","import React, { Component } from 'react';\n\n//import components\nimport Titles from \"./components/elements/Titles\";\nimport Form from \"./components/elements/Form\";\nimport Weather from \"./components/elements/Weather\";\nimport { API_KEY } from \"./components/config/config\";\n\n\n\nexport class App extends Component {\n\n    getWeather = async (e) => {\n        e.preventDefault()\n        const city = e.target.elements.city.value\n        const country = e.target.elements.country.value\n        const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`)\n        const data = api_call.json()\n        console.log(data)\n    }\n\n    render() {\n        return(\n            <div className='App'>\n                <Titles />\n                <Form getWeather={this.getWeather}/>\n                <Weather />\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}